type: edu
custom_name: stage2
files:
- name: zookeeper/zookeeper.py
  visible: true
  text: "camel = \"\"\"\nSwitching on camera from habitat with camels...\n ___.-''''-.\n\
    /___  @    |\n',,,,.     |         _.'''''''._\n     '     |        /        \
    \   \\\\\n     |     \\    _.-'             \\\\\n     |      '.-'           \
    \       '-.\n     |                               ',\n     |                 \
    \               '',\n      ',,-,                           ':;\n           ',,|\
    \ ;,,                 ,' ;;\n              ! ; !'',,,',',,,,'!  ;   ;:\n     \
    \        : ;  ! !       ! ! ;  ;   :;\n             ; ;   ! !      ! !  ; ;  \
    \ ;,\n            ; ;    ! !     ! !   ; ;     \n            ; ;    ! !    ! !\
    \     ; ;\n           ;,,      !,!   !,!     ;,;\n           /_I      L_I   L_I\
    \     /_I\nYey, our little camel is sunbathing!\"\"\"\n\n# write your code here\n"
  learner_created: false
- name: animals.py
  visible: false
  text: "camel = \"\"\"\nSwitching on camera from habitat with camels...\n ___.-''''-.\n\
    /___  @    |\n',,,,.     |         _.'''''''._\n     '     |        /        \
    \   \\\\\n     |     \\    _.-'             \\\\\n     |      '.-'           \
    \       '-.\n     |                               ',\n     |                 \
    \               '',\n      ',,-,                           ':;\n           ',,|\
    \ ;,,                 ,' ;;\n              ! ; !'',,,',',,,,'!  ;   ;:\n     \
    \        : ;  ! !       ! ! ;  ;   :;\n             ; ;   ! !      ! !  ; ;  \
    \ ;,\n            ; ;    ! !     ! !   ; ;     \n            ; ;    ! !    ! !\
    \     ; ;\n           ;,,      !,!   !,!     ;,;\n           /_I      L_I   L_I\
    \     /_I\nYey, our little camel is sunbathing!\"\"\"\n\nlion = \"\"\"\nSwitching\
    \ on camera from habitat with lions...\n                                     \
    \          ,w.\n                                             ,YWMMw  ,M  ,\n \
    \                       _.---.._   __..---._.'MMMMMw,wMWmW,\n                \
    \   _.-\"\"        '''           YP\"WMMMMMMMMMb,\n                .-' __.'  \
    \                 .'     MMMMW^WMMMM;\n    _,        .'.-'\"; `,       /`    \
    \ .--\"\"      :MMM[==MWMW^;\n ,mM^\"     ,-'.'   /   ;      ;      /   ,    \
    \   MMMMb_wMW\"  @\\\\\n,MM:.    .'.-'   .'     ;     `\\    ;     `,     MMMMMMMW\
    \ `\"=./`-,\nWMMm__,-'.'     /      _.\\      F'''-+,,   ;_,_.dMMMMMMMM[,_ / `=_}\n\
    \"^MP__.-'    ,-' _.--\"\"   `-,   ;       \\  ; ;MMMMMMMMMMW^``; __|\n      \
    \     /   .'            ; ;         )  )`{  \\ `\"^W^`,   \\  :\n          / \
    \ .'             /  (       .'  /     Ww._     `.  `\"\n         /  Y,       \
    \       `,  `-,=,_{   ;      MMMP`\"\"-,  `-._.-,\n        (--, )            \
    \    `,_ / `) \\/\"\")      ^\"      `-, -;\"\\:\nThe lion is croaking!\"\"\"\n\
    \ndeer = \"\"\"\nSwitching on camera from habitat with deers...\n   /|       |\\\
    \\\n`__\\\\\\\\       //__'\n   ||      ||\n \\__`\\     |'__/\n   `_\\\\\\\\\
    \   //_'\n   _.,:---;,._\n   \\_:     :_/\n     |@. .@|\n     |     |\n     ,\\\
    .-./ \\\\\n     ;;`-'   `---__________-----.-.\n     ;;;                     \
    \    \\_\\\\\n     ';;;                         |\n      ;    |              \
    \        ;\n       \\   \\     \\        |      /\n        \\_, \\    /      \
    \  \\     |\\\\\n          |';|  |,,,,,,,,/ \\    \\ \\_\n          |  |  |  \
    \         \\   /   |\n          \\  \\  |           |  / \\  |\n           | ||\
    \ |           | |   | |\n           | || |           | |   | |\n           | ||\
    \ |           | |   | |\n           |_||_|           |_|   |_|\n          /_//_/\
    \           /_/   /_/\nOur 'Bambi' looks hungry. Let's go to feed it!\"\"\"\n\n\
    goose = \"\"\"\nSwitching on camera from habitat with lovely goose...\n\n    \
    \                                _\n                                ,-\"\" \"\"\
    .\n                              ,'  ____  `.\n                            ,'\
    \  ,'    `.  `._\n   (`.         _..--.._   ,'  ,'        \\    \\\\\n  (`-.\\\
    \    .-\"\"        \"\"'   /          (  d _b\n (`._  `-\"\" ,._             (\
    \            `-(   \\\\\n <_  `     (  <`<            \\              `-._\\\\\
    \n  <`-       (__< <           :\n   (__        (_<_<          ;\n    `------------------------------------------\n\
    This bird stares intently at you... (Maybe it's time to change the channel?)\"\
    \"\"\n\nbat = \"\"\"\nSwitching on camera from habitat with bats...\n_________________\
    \               _________________\n ~-.              \\  |\\___/|  /         \
    \     .-~\n     ~-.           \\ / o o \\ /           .-~\n        >         \
    \  \\\\\\\\  W  //           <\n       /             /~---~\\             \\\\\
    \n      /_            |       |            _\\\\\n         ~-.        |      \
    \ |        .-~\n            ;        \\     /        i\n           /___      /\\\
    \   /\\      ___\\\\\n                ~-. /  \\_/  \\ .-~\n                  \
    \ V         V\nIt looks like this bat is fine.\"\"\"\n\nrabbit = \"\"\"\nSwitching\
    \ on camera from habitat with rabbits...\n         ,\n        /|      __\n   \
    \    / |   ,-~ /\n      Y :|  //  /\n      | jj /( .^\n      >-\"~\"-v\"\n   \
    \  /       Y\n    jo  o    |\n   ( ~T~     j\n    >._-' _./\n   /   \"~\"  |\n\
    \  Y     _,  |\n /| ;-\"~ _  l\n/ l/ ,-\"~    \\\\\n\\//\\/      .- \\\\\n Y \
    \       /    Y \n l       I     !\n ]\\      _\\    /\"\\\\\n(\" ~----( ~   Y.\
    \  )\nIt seems there will be more rabbits soon!\"\"\"\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    from animals import *


    class Zookeeper(StageTest):
        def generate(self):
            return [TestCase(attach=camel)]

        def check(self, reply, attach):
            if attach.strip() not in reply.strip():
                return CheckResult.false('You should output a camel!')
            return CheckResult.true()


    if __name__ == '__main__':
        Zookeeper('zookeeper.zookeeper').run_tests()
  learner_created: false
- name: hstest/test_case.py
  visible: false
  text: |
    from typing import List, Dict, Any, Tuple


    class TestCase:

        def __init__(self, *, stdin='', args=None,
                     attach=None, files=None, copy_to_attach=False):
            self.input: str = stdin
            self.args: List[str] = [] if args is None else args
            self.attach: Any = attach
            self.files: Dict[str, str] = {} if files is None else files
            if copy_to_attach:
                self.attach = stdin

        @staticmethod
        def from_stepik(stepik_tests: List[Tuple[str, Any]]) -> List['TestCase']:
            hs_tests = []
            for test in stepik_tests:
                hs_test = TestCase()
                if type(test) in (list, tuple):
                    hs_test.input = test[0]
                    hs_test.attach = test[1]
                elif type(test) is str:
                    hs_test.input = test
                else:
                    raise ValueError("Bad test: " + str(test))
                hs_tests += [hs_test]
            return hs_tests
  learner_created: false
- name: hstest/exceptions.py
  visible: false
  text: |2

    class BadSolutionException(Exception):
        def __init__(self, message):
            self.message = message


    class SyntaxException(BadSolutionException):
        def __init__(self, message):
            super().__init__(message)


    class ExitException(BadSolutionException):
        def __init__(self, message):
            super().__init__(message)
  learner_created: false
- name: hstest/stage_test.py
  visible: false
  text: |
    import sys
    import runpy
    import os
    import io
    import importlib
    import signal
    import builtins
    import traceback
    from typing import List, Any, Dict
    from hstest.test_helper import *
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    from hstest.exceptions import *


    class StageTest:

        real_stdin = None
        real_print = None
        real_input = None
        user_output: io.StringIO = None

        @staticmethod
        def remove_kill_methods():
            os.kill = lambda *x, **y: exit(0)
            os._exit = lambda *x, **y: exit(0)
            os.killpg = lambda *x, **y: exit(0)
            signal.pthread_kill = lambda *x, **y: exit(0)
            signal.siginterrupt = lambda *x, **y: exit(0)

        @staticmethod
        def set_input(user_input: str):
            sys.stdin = io.StringIO(user_input)

        @staticmethod
        def add_input(user_input: str):
            sys.stdin: io.StringIO
            curr_position = sys.stdin.seek(0, io.SEEK_CUR)
            sys.stdin.seek(0)
            sys.stdin = io.StringIO(sys.stdin.read() + user_input)
            sys.stdin.seek(curr_position)

        @staticmethod
        def print(*args, **kwargs):
            StageTest.real_print(*args, **kwargs)
            StageTest.real_print(*args, **kwargs, file=StageTest.user_output)

        @staticmethod
        def input(arg=''):
            StageTest.print(arg, end='')
            user_input = StageTest.real_input()
            # StageTest.print()
            return user_input

        @staticmethod
        def replace_globals():
            StageTest.real_stdin = sys.stdin
            StageTest.real_print = builtins.print
            StageTest.real_input = builtins.input
            builtins.print = StageTest.print
            builtins.input = StageTest.input

        @staticmethod
        def get_print_back():
            builtins.print = StageTest.real_print
            sys.stdin = StageTest.real_stdin

        def __init__(self, module_to_test: str):
            self.remove_kill_methods()
            self.replace_globals()
            self.module_to_test = module_to_test
            self.this_test_file = __file__
            self.file_to_test = module_to_test.replace('.', os.sep) + '.py'
            self.full_file_to_test = ''
            self.tests: List[TestCase] = []

        def reset(self):
            StageTest.user_output = io.StringIO()
            top_module = self.module_to_test[:self.module_to_test.index('.')]
            for name, module in list(sys.modules.items()):
                if name.startswith(top_module):
                    importlib.reload(module)

        @staticmethod
        def create_files(files: Dict[str, str]):
            for file, content in files.items():
                with open(file, 'w') as f:
                    f.write(content)

        @staticmethod
        def delete_files(files: Dict[str, str]):
            for file in files.keys():
                if os.path.isfile(file):
                    os.remove(file)

        def test(self, test_case: TestCase) -> str:
            self.reset()
            try:
                self.create_files(test_case.files)
                sys.argv = [self.file_to_test] + test_case.args
                self.set_input(test_case.input)
                runpy.run_module(
                    self.module_to_test,
                    run_name="__main__"
                )
                self.delete_files(test_case.files)
                return StageTest.user_output.getvalue()
            except SyntaxError as e:

                file = e.filename
                file = file.replace(os.sep, '.')
                file = file[file.index(self.module_to_test):-3]
                file = file.replace('.', os.sep) + '.py'

                output = f'File "{file}", line {e.lineno}\n' \
                         + e.text.strip()[: e.offset-1] + '\n' \
                         'SyntaxError: invalid syntax'

                # '`' * (e.offset - 2) + '^'

                raise SyntaxException(output)

            except (SystemExit, KeyboardInterrupt):
                raise ExitException('Tried to exit.')

        def generate(self) -> List[TestCase]:
            raise NotImplemented

        def check(self, reply: str, attach: Any) -> CheckResult:
            raise NotImplemented

        def get_stacktrace(self, hide_internals, skipped_traces=0):

            if self.full_file_to_test != '':
                common_prefix = os.path.commonpath([
                    self.full_file_to_test, self.this_test_file
                ])
            else:
                common_prefix = ''

            exc_type, exc_obj, exc_tb = sys.exc_info()

            if hide_internals and skipped_traces != 0:
                traceback_msg = 'Traceback (most recent call last):\n'
            else:
                traceback_msg = ''

            for line in traceback.TracebackException(
                    type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):
                if not hide_internals:
                    traceback_msg += line
                elif skipped_traces >= 0:
                    skipped_traces -= 1
                elif self.this_test_file not in line:
                    traceback_msg += line.replace(common_prefix + os.sep, '')

            return traceback_msg

        def run_tests(self):

            test_number = 0
            try:
                for test in self.generate():
                    test_number += 1
                    reply = self.test(test)
                    result = self.check(reply, test.attach)
                    if not result.result:
                        fail_msg = f'Wrong answer in test #{test_number}'
                        self.get_print_back()
                        failed(fail_msg + '\n\n' + result.feedback)
                        return
                passed()
            except SyntaxException as ex:
                self.get_print_back()
                failed(ex.message)

            except ExitException as ex:
                error_msg = f'Error in test #{test_number}'
                self.get_print_back()
                failed(error_msg + '\n\n' + ex.message)

            except Exception:

                exc_type, exc_obj, exc_tb = sys.exc_info()
                trace_frames = []

                user_trace_started = False
                skipped_traces = 0
                while exc_tb is not None:
                    code = exc_tb.tb_frame.f_code
                    filename = code.co_filename

                    if filename.endswith(self.file_to_test) and not user_trace_started:
                        user_trace_started = True
                        self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename

                    if user_trace_started:
                        trace_frames += [exc_tb.tb_frame.f_code]
                    else:
                        skipped_traces += 1

                    exc_tb = exc_tb.tb_next

                if not trace_frames:
                    exception_msg = (
                            f"Fatal error in test #{test_number}, " +
                            "please send the report to support@hyperskill.org"
                    )
                    stacktrace = self.get_stacktrace(hide_internals=False)

                else:
                    exception_msg = f'Exception in test #{test_number}'
                    stacktrace = self.get_stacktrace(
                        hide_internals=True,
                        skipped_traces=skipped_traces
                    )

                self.get_print_back()
                failed(exception_msg + '\n\n' + stacktrace)
  learner_created: false
- name: hstest/test_helper.py
  visible: false
  text: |
    import sys


    def get_file_text(path):
        """ Returns file text by path"""
        file_io = open(path, "r")
        text = file_io.read()
        file_io.close()
        return text


    def get_file_output(encoding="utf-8", path=sys.argv[-1], arg_string=""):
        """
        Returns answer file output
        :param encoding: to decode output in python3
        :param path: path of file to execute
        :return: list of strings
        """
        import subprocess

        proc = subprocess.Popen([sys.executable, path], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT)
        if arg_string:
            for arg in arg_string.split("\n"):
                proc.stdin.write(bytearray(str(arg) + "\n", encoding))
                proc.stdin.flush()

        return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))


    def test_file_importable():
        """ Tests there is no obvious syntax errors"""
        path = sys.argv[-1] + '1'

        print(path)

        if not path.endswith(".py"):
            import os

            parent = os.path.abspath(os.path.join(path, os.pardir))
            python_files = [f for f in os.listdir(parent)
                            if os.path.isfile(os.path.join(parent, f)) and f.endswith(".py")]

            failed('\n'.join(python_files))

            for python_file in python_files:
                if python_file == "tests.py":
                    continue

                check_importable_path(os.path.join(parent, python_file))
            return
        check_importable_path(path)


    def check_importable_path(path):
        """ Checks that file is importable.
            Reports failure otherwise.
        """
        saved_input = patch_input()
        try:
            import_file(path)
        except:
            failed("The file contains syntax errors", test_file_importable.__name__)
            return
        finally:
            revert_input(saved_input)

        passed(test_file_importable.__name__)


    def patch_input():
        def mock_fun(_m=""):
            return "mock"

        if sys.version_info[0] == 3:
            import builtins
            save_input = builtins.input
            builtins.input = mock_fun
            return save_input
        elif sys.version_info[0] == 2:
            import __builtin__
            save_input = __builtin__.raw_input
            __builtin__.raw_input = mock_fun
            __builtin__.input = mock_fun
            return save_input


    def revert_input(saved_input):
        if sys.version_info[0] == 3:
            import builtins
            builtins.input = saved_input
        elif sys.version_info[0] == 2:
            import __builtin__
            __builtin__.raw_input = saved_input
            __builtin__.input = saved_input


    def import_file(path):
        """ Returns imported file """
        if sys.version_info[0] == 2 or sys.version_info[1] < 3:
            import imp

            return imp.load_source("tmp", path)
        elif sys.version_info[0] == 3:
            import importlib.machinery

            return importlib.machinery.SourceFileLoader("tmp", path).load_module("tmp")


    def import_task_file():
        """ Returns imported file.
            Imports file from which check action was run
        """
        path = sys.argv[-1]
        return import_file(path)


    def test_is_not_empty():
        """
            Checks that file is not empty
        """
        path = sys.argv[-1]
        file_text = get_file_text(path)

        if len(file_text) > 0:
            passed()
        else:
            failed("The file is empty. Please, reload the task and try again.")


    def test_text_equals(text, error_text):
        """
            Checks that answer equals text.
        """
        path = sys.argv[-1]
        file_text = get_file_text(path)

        if file_text.strip() == text:
            passed()
        else:
            failed(error_text)


    def set_congratulation_message(message):
        """ Overrides default 'Congratulations!' message """
        print("#educational_plugin CONGRATS_MESSAGE " + message)


    def failed(message: str):
        """ Reports failure """
        lines = message.splitlines()
        print("\n#educational_plugin FAILED + " + lines[0])
        for line in lines[1:]:
            print("#educational_plugin " + line)


    def passed(name=None):
        """ Reports success """
        if not name:
            name = sys._getframe().f_back.f_code.co_name
        print("#educational_plugin " + name + " test OK")


    def check_samples(samples=()):
        """
          Check script output for all samples. Sample is a two element list, where the first is input and
          the second is output.
        """
        for sample in samples:
            if len(sample) == 2:
                output = get_file_output(arg_string=str(sample[0]))
                if "\n".join(output) != sample[1]:
                    failed(
                        "Test from samples failed: \n \n"
                        "Input:\n{}"
                        "\n \n"
                        "Expected:\n{}"
                        "\n \n"
                        "Your result:\n{}".format(str.strip(sample[0]), str.strip(sample[1]), "\n".join(output)))
                    return
            set_congratulation_message("All test from samples passed. Now we are checking your solution on Stepik server.")

        passed()


    def run_common_tests(error_text="Please, reload file and try again"):
        test_is_not_empty()
        test_file_importable()
  learner_created: false
- name: hstest/check_result.py
  visible: false
  text: |
    class CheckResult:

        def __init__(self, result: bool, feedback: str):
            self.result = result
            self.feedback = feedback

        @staticmethod
        def true():
            return CheckResult(True, '')

        @staticmethod
        def false(feedback: str = ''):
            return CheckResult(False, feedback)


    def wrong(feedback: str = '') -> CheckResult:
        return CheckResult.false(feedback)


    def accept():
        return CheckResult.true()
  learner_created: false
feedback_link: https://hyperskill.org/projects/98/stages/540/implement
status: Solved
record: 2
